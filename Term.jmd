```julia
using JuMP
using HiGHS
using Plots
gr()
using DataFrames
using Measures


Q = [500*3.785, 600*3.785, 700*3.785, 800*3.785, 900*3.785, 1000*3.785, 1100*3.785, 1200*3.785]; #initial flowrate (L/min)
C_0 = [3.5/1000, 10/1000, 100/1000, 500/1000, 1, 1.5, 2]; #initial arsenic concentration (mg/L)
#Q = 500*3.785
#C_0 = 3.5/1000
methods = ["none", "excavation", "in situ biological"]; #arsenic treatment methods
J = 1:length(methods);
e = [0, 100, 87]; #efficiency to methods (%)
cost = [0, 0.15, 0.00053]; #cost of methods ($/L)
Kf = 1.4833*10^(-5); #Freundlich constant (g/g)


# SYSTEM 1: EPA Mode
total_cost_epa = zeros(7,7);

# looping through Q and store each value for each scenario with the min cost objective (each scenario gives X's
for i in 1:7
    for n in 1:7
        epa_model = Model(HiGHS.Optimizer)
        # decision variable -> flowrates into each treatment method
        @variable(epa_model, X[J] >= 0);
        # objective
        @objective(epa_model, Min, sum(X.*cost));
        # identify constraints
        @constraint(epa_model, concentration,  0.01 >= (1-Kf)*sum(C_0[n]*(1-e[J])*(X[J]/Q[i])));
        @constraint(epa_model, flowrate, sum(X[J]) == Q[i]); 
        #@constraint(epa_model, concentration[j in J],  0.01 >= (1-Kf)* sum(C_0*(1-e[j])*(X[j]/Q)));
        #@constraint(epa_model, flowrate, sum(X[J]) == Q); 
        #run model
        optimize!(epa_model);

        total_cost_epa[i,n] = objective_value(epa_model);
    end
end

print(total_cost_epa[i,n])
#min(total_cost_epa)



#SYSTEM 2: FDA Model

#Plant 1: Rice
total_cost_rice = zeros(7,7);

for i in 1:7
    for n in 1:7
        fda_model_rice = Model(HiGHS.Optimizer)
        # decision variable -> flowrates into each treatment method
        @variable(fda_model_rice, X[J] >= 0);
        # objective
        @objective(fda_model_rice, Min, sum(X.*cost)+ SOMETHING); #WE NEED TO FIX COST
        # identify constraints
        @constraint(fda_model_rice, concentration,  0.1 >= 0.85*(1-Kf)*sum(C_0[n]*(1-e[J])*(X[J]/Q[i])));
        @constraint(fda_model_rice, flowrate, sum(X[J]) == Q[i]); 
        #run model
        optimize!(fda_model_rice);

        total_cost_rice[i,n] = objective_value(fda_model_rice);
    end
end

print(total_cost_rice[i,n])

#Plant 2: Amaranth
total_cost_am = zeros(7,7);

for i in 1:7
    for n in 1:7
        fda_model_am = Model(HiGHS.Optimizer)
        # decision variable -> flowrates into each treatment method
        @variable(fda_model_am, X[J] >= 0);
        # objective
        @objective(fda_model_am, Min, sum(X.*cost)+ SOMETHING); #WE NEED TO FIX COST
        # identify constraints
        @constraint(fda_model_am, concentration,  0.1 >= 0.0022*(1-Kf)*sum(C_0[n]*(1-e[J])*(X[J]/Q[i])));
        @constraint(fda_model_am, flowrate, sum(X[J]) == Q[i]); 
        #run model
        optimize!(fda_model_am);

        total_cost_am[i,n] = objective_value(fda_model_am);
    end
end

print(total_cost_am[i,n])

```
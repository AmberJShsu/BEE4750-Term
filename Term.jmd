```julia
using JuMP
using HiGHS
using Plots
gr()
using DataFrames
using Measures


Q = [500*3.785, 600*3.785, 700*3.785, 800*3.785, 900*3.785, 1000*3.785, 1100*3.785, 1200*3.785]; #initial flowrate (L/min)
C_0 = [3.5/1000, 10/1000, 100/1000, 500/1000, 1, 1.5, 2]; #initial arsenic concentration (mg/L)
#Q = 500*3.785
#C_0 = 3.5/1000
methods = ["none", "excavation", "in situ biological"]; #arsenic treatment methods
J = 1:length(methods);
e = [0, 100, 87]; #efficiency to methods (%)
cost = [0, 0.15, 0.00053]; #cost of methods ($/L)
Kf = 1.4833*10^(-5); #what is this variable called lol (g/g)
N = 1; #what is this variable called lol

# looping through Q and store each value for each scenario with the min cost objective (each scenario gives X's

#SYSTEM 1: EPA Mode
total_cost = zeros(7,7);

for i in 1:7
    for n in 1:7
        epa_model = Model(HiGHS.Optimizer)
        # decision variable -> flowrates into each treatment method
        @variable(epa_model, X[J] >= 0);
        # objective
        @objective(epa_model, Min, sum(X.*cost));
        # identify constraints
        @constraint(epa_model, concentration,  0.01 >= (1-Kf)*sum(C_0[n]*(1-e[J])*(X[J]/Q[i])));
        @constraint(epa_model, flowrate, sum(X[J]) == Q[i]); 
        #@constraint(epa_model, concentration[j in J],  0.01 >= (1-Kf)* sum(C_0*(1-e[j])*(X[j]/Q)));
        #@constraint(epa_model, flowrate, sum(X[J]) == Q); 
        #run model
        optimize!(epa_model);

        total_cost[i,n] = objective_value(epa_model);
    end
end

print(total_cost[i,n])
#min(total_cost)






#SYSTEM 2: FDA Model

#plants = ["rice", "ik something else yummy"]; #different plants 
#Ap = [0.85, ]; #absorbance coefficient of each plant

#fda_model = Model(HiGHS.Optimizer)
# decision variable -> flowrates into each treatment method
#@variable(epa_model, X[1:3] >= 0)

# objective


#function model(X) 
    
```